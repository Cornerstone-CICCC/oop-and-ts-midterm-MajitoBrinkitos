---

---
<header>
    <h1 class="title">You Dream It, We Create It</h1>
  </header>
  <main>
    <button id="cart-btn" type="button" class="btn btn-prod">
        <span id="show-hide-cart">Cart</span>
    </button>
    <div id="cart-container">
        <button class="btn-prod" id="clear-cart-btn">Clear Cart</button>
        <div id="products-container"></div>
        <p>Total number of items: <span id="total-items">0</span></p>
        <p>Subtotal: <span id="subtotal">$0</span></p>
        <p>Taxes:<span id="taxes">$0</span></p>
        <p>Total: <span id="total"></span></p>
    </div>
    <div id="bakery-card-container"></div>
  </main>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const cartContainer = document.getElementById('cart-container');
      const productsContainer = document.getElementById('products-container');
      const bakeryCards = document.getElementById('bakery-card-container');
  
      const cartBtn = document.getElementById('cart-btn');
      const clearCartBtn = document.getElementById('clear-cart-btn');
  
      const totalNumberOfItems = document.getElementById('total-items');
      const cartSubTotal = document.getElementById('subtotal');
      const cartTaxes = document.getElementById('taxes');
      const cartTotal = document.getElementById('total');
      const showHideCartSpan = document.getElementById('show-hide-cart');
      let isCartShowing = false;
  
      class ShoppingCart {
        constructor() {
          this.items = [];
          this.total = 0;
          this.taxRate = 8.25;
        }
  
        addItem(id, products) {
          const product = products.find(item => item.id === id);
          const { name, price } = product;
          this.items.push(product);
  
          const totalCountPerProduct = {};
  
          this.items.forEach(({ id }) => {
            totalCountPerProduct[id] = (totalCountPerProduct[id] || 0) + 1;
            const currentProductCount = totalCountPerProduct[id];
            const currentProductCountSpan = document.getElementById(`product-count-for-id${id}`);
  
            if (currentProductCount > 1) {
              currentProductCountSpan.textContent = `${currentProductCount}x`;
            } else {
              productsContainer.innerHTML += `
                <div id="bakery${id}" class="product">
                  <p><span class="product-count" id="product-count-for-id${id}"></span>${name}</p>
                  <p>${price}</p>
                </div>
              `;
            }
          });
        }
  
        getCounts() {
          return this.items.length;
        }
  
        clearCart() {
          if (!this.items.length) {
            alert("Your shopping cart is already empty");
            return;
          }
  
          const isCartCleared = confirm(
      "Are you sure you want to clear all items from your shopping cart?"
    );
  
    if (isCartCleared) {
      this.items = [];
      this.total = 0;
      productsContainer.innerHTML = "";
      totalNumberOfItems.textContent = 0;
      cartSubTotal.textContent = 0;
      cartTaxes.textContent = 0;
      cartTotal.textContent = 0;
    }
  
          this.items = [];
          alert("Your shopping cart has been cleared");
          this.updateCartUI();
        }
  
        updateCartUI() {
          totalNumberOfItems.innerText = '0';
          cartSubTotal.innerText = '$0';
          cartTaxes.innerText = '$0';
          cartTotal.innerText = '$0';
          productsContainer.innerHTML = '';
        }
  
        calculateTaxes(amount) {
          return parseFloat(((this.taxRate / 100) * amount).toFixed(2));
        }
  
        calculateTotal() {
          const subTotal = this.items.reduce((total, item) => total + item.price, 0);
          const tax = this.calculateTaxes(subTotal);
          this.total = subTotal + tax;
          cartSubTotal.textContent = `$${subTotal.toFixed(2)}`;
          cartTaxes.textContent = `$${tax.toFixed(2)}`;
          cartTotal.textContent = `$${this.total.toFixed(2)}`;
          return this.total;
        }
      }
  
      const cart = new ShoppingCart();
      const addToCartBtns = document.getElementsByClassName("add-to-cart-btn");
      [...addToCartBtns].forEach((btn) => {
        btn.addEventListener("click", (event) => {
          cart.addItem(Number(event.target.id), products);
          totalNumberOfItems.textContent = cart.getCounts();
          cart.calculateTotal();
        });
      });
  
      cartBtn.addEventListener("click", () => {
        isCartShowing = !isCartShowing;
        showHideCartSpan.textContent = isCartShowing ? "Hide" : "Show";
        cartContainer.style.display = isCartShowing ? "block" : "none";
      });
  
      clearCartBtn.addEventListener("click", cart.clearCart.bind(cart));
      
      //Fetching products from FakeStore API
      fetch(`https://fakestoreapi.com/products`)
      .then(response => response.json())
      .then(data => {
        const products =data.filter(product => product.category === "men's clothing" || product.category === "women's clothing");
        bakeryCards.innerHTML = ''; //cleaning cards
        products.forEach(({ title, id, price, category, image}) => {
          bakeryCards.innerHTML += `
          <div class="bakery-card">
            <img src="${image}" alt="${title}" class="bakery-img" />
            <h2 style="color: var(--color-prod);" class="bakery-price">$${price}</h2>
            <p style="color: var(--color-prod);" class="product-category">Category: ${category}</p>
            <button id="${id}" class="btn-prod add-to-cart-btn">Add to cart</button> 
          </div>
          `
        });

        //New "Add to cart"
        const newAddToCartBtns = document.getElementsByClassName("add-to-cart-btn");
        [...newAddToCartBtns].forEach((btn) => {
          btn.addEventListener("click", (event) => {
            cart.addItem(Number(event.target.id), products);
            totalNumberOfItems.textContent = cart.getCounts();
            cart.calculateTotal();
          });
        });
      });
    });
  </script>